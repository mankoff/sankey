
#+PROPERTY: header-args:bash+ :session *sankey-shell*
#+PROPERTY: header-args:jupyter-python+ :dir (file-name-directory buffer-file-name) :session foo

*  On Ice Sheet Mass Flow

* Table of contents                               :toc_2:noexport:
-  [[#on-ice-sheet-mass-flow][On Ice Sheet Mass Flow]]
- [[#introduction][Introduction]]
- [[#abstract][Abstract]]
- [[#mass-flow-values][Mass flow values]]
- [[#methods][Methods]]
- [[#results][Results]]
- [[#implementation][Implementation]]
  - [[#reset][Reset]]
  - [[#east-v-west-antarctica][East v. West Antarctica]]
  - [[#basal-melt][Basal melt]]
  - [[#antarctic-ice-shelves][Antarctic Ice shelves]]
  - [[#smb-mar][SMB (MAR)]]
  - [[#gz-retreat-in-greenland][GZ retreat in Greenland]]

* Introduction

Sankey diagrams for mass flow in Greenland and Antarctica.

Uses scripts and CSVs to automate generation to support graphics for different years, models, etc.

* Abstract

Observing, quantifying, and understanding mass loss takes field observations, computer models, and also knowledge production and sharing. Tabular data is optimized for computers and useful for humans, but graphical presentations can provide significantly higher information density. Here we present several Sankey diagrams depicting mass flow of ice in Greenland and Antarctica, and discuss some properties of the graphics and the cryospheric processes represented by the graphics. We focus on insight available through this choice of display, methods for estimating the various cryospheric processes, and uncertainty...
  
* Mass flow values

Here we show example data for Greenland baseline. See [[file:./dat]] folder for other data. 

#+BEGIN_SRC bash :exports both
cat ./dat/gl_baseline.csv
#+END_SRC

#+RESULTS:
| Label  | Description            | Value | cite_key           |
| DR     | Drift                  |   200 | TODO               |
| RFZ    | Refreeze (after melt)  |   190 | fettweis_2020      |
| SF     | Snowfall               |   700 | fettweis_2020      |
| RF     | Rainfall               |    45 | fettweis_2020      |
| RF-LIQ | Rainfall runoff        |    10 | fettweis_2020      |
| CD     | Condensation           |    30 | TODO               |
| DP     | Deposition             |    20 | TODO               |
| FRET   | Frontal retreat        |    50 | kochtitzky_2023    |
| GZRET  | Grounding line retreat |    10 | TODO               |
| SU     | Sublimation            |    55 | fettweis_2020      |
| RU     | Runoff                 |   390 | fettweis_2002      |
| DYN    | Dynamics               |   500 | mankoff_2020_solid |
| ICE    | Icebergs               |   250 | enderlin_2013      |
| SUB    | Submarine melt         |   250 | enderlin_2013      |
| EV     | Evaporation            |   100 | TODO               |
| BM     | Basal melt             |    20 | karlsson_2021      |

* Methods

+ Any CSV file can be placed in the =./dat/= that has the required rows.
+ Running =make= will then generate a Sankey diagram for each CSV file.

* Results

#+BEGIN_SRC bash :exports results :results verbatim :results none
convert -density 300 -background white -alpha remove -trim -gravity center -annotate -25-30 'Greenland' gl_baseline.pdf tmp/gl.png

convert -density 300 -background white -alpha remove -trim -gravity center -annotate -5-30 'Antarctica' aq_baseline.pdf tmp/aq.png

convert -density 300 -background white -alpha remove -trim -gravity center -annotate +25-60 'East' aq_east.pdf ./tmp/aqe.png

convert -density 300 -background white -alpha remove -trim -gravity center -annotate -5-30 'West' aq_west.pdf ./tmp/aqw.png

convert -density 300 -background white -alpha remove -trim -gravity center -draw "translate 50,-150 rotate 90 text 0,0 'Peninsula'" aq_peninsula.pdf ./tmp/aqp.png

convert -density 300 -background transparent -alpha remove legend.svg ./tmp/legend.png
composite -gravity center -geometry '100%x100%+300-300' tmp/legend.png tmp/aq.png tmp/aq_legend.png

convert -colorspace rgb +append tmp/{aq_legend,gl}.png aq_gl.png
convert -colorspace rgb +append tmp/{aqe,aqw,aqp}.png aq_sub.png
convert -colorspace rgb -gravity center -append {aq_gl,aq_sub}.png ./fig.png
#+END_SRC

#+BEGIN_QUOTE
[!NOTE]  
All figures are width-proportional within and between each other.
#+END_QUOTE

[[./fig.png]]

* Implementation

** Reset

#+BEGIN_SRC bash :exports both :results verbatim
trash G_AQ
[[ -e ./G_AQ ]] || grass -e -c EPSG:3031 ./G_AQ

trash G_GL
[[ -e ./G_GL ]] || grass -e -c EPSG:3413 ./G_GL
#+END_SRC

** East v. West Antarctica

#+BEGIN_SRC bash :exports both :results verbatim
grass ./G_AQ/PERMANENT
v.in.ogr input=${DATADIR}/NSIDC/NSIDC-0709.002/1992.02.07/IceBoundaries_Antarctica_v02.shp output=basins

g.region vector=basins res=10000 -pas

v.db.select map=basins|head
v.db.select -c map=basins columns=Regions | sort | uniq # East West Peninsula Islands

v.to.rast input=basins output=east use=val val=1 where='Regions == "East"'
v.to.rast input=basins output=west use=val val=2 where='(Regions == "West")'
v.to.rast input=basins output=peninsula use=val val=3 where='(Regions == "Peninsula")'
# v.to.rast input=basins output=islands use=val val=3 where='(Regions == "Islands")'
r.patch input=east,west,peninsula output=basins

r.grow input=basins output=basins_grow radius=5
r.mapcalc "basins_grow = int(basins_grow)" --o

r.colors map=basins,basins_grow color=viridis
#+END_SRC

** Basal melt
*** Greenland

+ 21 Gt/yr from Karlsson (2021) http://doi.org/10.1038/s41467-021-23739-z
+ Assume steady state

*** Antarctica

+ 65 Gt/yr from Pattyn (2010) http://doi.org/10.1016/j.epsl.2010.04.025
+ If split by area, its 25 % vs 75 %
+ Better: Split by weighted geothermal heat for E v W Antarctica
  + This is still (somewhat) weighted by area. Neglects 0 basal melt in areas when ice sheet is frozen to the bed. Neglects frictional heating differences between E & W.

**** Geothermal heat

Load 
#+BEGIN_SRC bash :exports both :results verbatim
grass -c ./G_AQ/Shapiro_2004

fname=Shapiro_2004/Antarctica_heat_flux_5km.nc
r.in.gdal -o input=NetCDF:${DATADIR}/${fname}:bheatflx output=bheatflux
g.region raster=bheatflux -pa
#+END_SRC

Sum by ROI. Units doesn't matter here, we just want relative %
#+BEGIN_SRC bash :exports both :results verbatim
r.mask raster=basins@PERMANENT --o --q
r.univar -g bheatflux | grep ^sum=
eval $(!!)
gf_all=${sum}

r.mask raster=basins@PERMANENT maskcats=1 --o --q
eval $(r.univar -g bheatflux | grep ^sum=)
gf_e=${sum}

r.mask raster=basins@PERMANENT maskcats=2 --o --q
eval $(r.univar -g bheatflux | grep ^sum=)
gf_w=${sum}

r.mask raster=basins@PERMANENT maskcats=3 --o --q
eval $(r.univar -g bheatflux | grep ^sum=)
gf_p=${sum}

r.mask -r
#+END_SRC

#+BEGIN_SRC bash :exports both :results verbatim
echo East
echo "${gf_e}/${gf_all}"|bc -l
echo West
echo "${gf_w}/${gf_all}"|bc -l
echo Peninsula
echo "${gf_p}/${gf_all}"|bc -l
#+END_SRC

#+RESULTS:
: East
: .70880323929018432555
: West
: .25048300096071189826
: Peninsula
: .04071375974910620730

Results:

+ All: 65 Gt/yr Pattyn (2010) http://doi.org/10.1016/j.epsl.2010.04.025
+ East: 65 * 0.71 = 46.15
+ West: 65 * 0.25 = 16.25
+ Peninsula: 65 * 0.04 = 2.6



** Antarctic Ice shelves

+ See Davison (2023) http://doi.org/10.1126/sciadv.adi0186 particularly Supplemental Table S2.

#+BEGIN_SRC jupyter-python :exports both
import pandas as pd

fname = '~/data/Davison_2023/adi0186_table_s2.xlsx'
loc = pd.read_excel(fname, sheet_name='Total mass changes',
                    index_col = 0, usecols = 'B,C,D', skiprows = 4)
loc = loc.drop('Antarctic Ice Shelves')

steady = pd.read_excel(fname, sheet_name='Steady-state',
                     index_col = 0, usecols = 'B:F', skiprows = 5)
steady.columns = ['D', 'BMB', 'Calving', 'SMB']

fret = pd.read_excel(fname, sheet_name='Calving',
                     index_col = 0, skiprows = 4).set_index('Ice shelf')
fret = fret.drop('Antarctic Ice Shelves')
c = fret.columns
c = c[[_[0] == 'o' for _ in fret.columns]]
fret = fret[c]
fret = fret.mean(axis='columns')
fret.name = 'Calving2'

flow = loc.join(steady)
flow = flow.join(fret)
flow.sum()
#+END_SRC

#+RESULTS:
: D             1838.804842
: BMB            428.520452
: Calving        902.775112
: SMB            488.207716
: Calving2      1596.151121

#+BEGIN_SRC jupyter-python :exports both
mass[['D','BMB']].sum()
#+END_SRC

#+RESULTS:
: D      1838.804842
: BMB     428.520452
: dtype: float64

#+BEGIN_SRC jupyter-python :exports both
import geopandas as gpd
fname = '~/data/NSIDC/NSIDC-0709.002/1992.02.07/IceBoundaries_Antarctica_v02.shp'
ew = gpd.read_file(fname)
ew.drop(columns=['geometry']).head()
#+END_SRC

#+RESULTS:
|    | NAME           | Regions   | Subregions   | TYPE   | Asso_Shelf     |
|----+----------------+-----------+--------------+--------+----------------|
|  0 | LarsenE        | Peninsula | Ipp-J        | GR     | LarsenE        |
|  1 | Dawson_Lambton | East      | nan          | FL     | nan            |
|  2 | Academy        | East      | Jpp-K        | GR     | Filchner       |
|  3 | Brunt_Stancomb | East      | K-A          | GR     | Brunt_Stancomb |
|  4 | Riiser-Larsen  | East      | K-A          | GR     | Riiser-Larsen  |

#+BEGIN_SRC jupyter-python :exports both
m = gpd.GeoDataFrame(mass, geometry=gpd.points_from_xy(mass['longitude'],mass['latitude']), crs="EPSG:4326")

m = m.to_crs('epsg:3031')
e = ew.to_crs('epsg:3031')

idx = ew.sindex.nearest(m['geometry'], return_all=False)
m['Region'] = ''
for midx,ewidx in idx.T:
    arr = m.iloc[midx].copy(deep=True)
    arr['Region'] = ew.iloc[ewidx]['Regions']
    m.iloc[midx] = arr

m.loc['Total'] = m.sum(axis='rows', numeric_only=True)
m.loc['Total', 'Region'] = 'All'

m[['Region','D','BMB']].groupby('Region').sum(numeric_only=True).drop('Islands').round()
#+END_SRC

#+RESULTS:
:RESULTS:
| Region    |    D |   BMB |
|-----------+------+-------|
| All       | 1839 |   429 |
| East      |  911 |    87 |
| Peninsula |  160 |    78 |
| West      |  767 |   261 |
:END:

** SMB (MAR)
*** Provenance

#+BEGIN_SRC bash :exports both :results verbatim
mkdir -p dat
pushd dat
wget http://phypc15.geo.ulg.ac.be/fettweis/tmp/ken/MARv3.12-ANT.nc4
wget http://phypc15.geo.ulg.ac.be/fettweis/tmp/ken/MARv3.12-GRD.nc4
popd
#+END_SRC

+ MB ~ SF+RF-RU-SU.
+ Refreezing ~ ME+RF-RU
+ For the uncertainty, you can use 15%.

*** Greenland

#+BEGIN_SRC jupyter-python :exports both
import xarray as xr

ds = xr.open_dataset('dat/MARv3.12-GRD.nc4')\
    .rename({'X10_85':'X',
             'Y20_155':'Y',
             'TIME2':'time'})

# Remove Canada
ds['newmask'] = (ds['X'] - ds['Y']).T
ds = ds.where(ds['newmask'] > 500)

# Mask to ice
ds = ds.where(ds['MSK'] > 50)

# Add new terms and limit to terms of interest
ds['RFZ'] = ds['ME'] + ds['RF'] - ds['RU']
ds = ds[['SF','RF','RU','SU','ME','RFZ','AREA']]

# scale
## units are mm.w.eq. per grid cell. Grid cell areas are in km^2
## + mm.w.eq. -> m w.eq.: /1E3
## + m w.eq -> kg: *1E3
## + area in km^2 -> m^2: *1E3*1E3
## + kg -> Gt: /1E12
ds = ds/1E3 * 1E3 * ds['AREA']*1E3*1E3 / 1E12

ds = ds.sum(dim=['X','Y'])

print("baseline:")
print(ds.mean(dim='time'))

print("\n\n2019:")
print(ds.where(ds['time'] == 2019).sum())
#+END_SRC

#+RESULTS:
#+begin_example
baseline:
<xarray.Dataset>
Dimensions:  ()
Data variables:
    SF       float64 700.3
    RF       float64 42.78
    RU       float64 390.3
    SU       float64 53.15
    ME       float64 540.2
    RFZ      float64 192.7
    AREA     float32 720.6


2019:
<xarray.Dataset>
Dimensions:  ()
Data variables:
    SF       float64 632.5
    RF       float64 35.74
    RU       float64 640.3
    SU       float64 60.92
    ME       float64 880.0
    RFZ      float64 275.4
    AREA     float32 720.6
#+end_example


*** Antarctica

**** Export E/W/P mask on the MAR grid

#+BEGIN_SRC bash :exports both :results verbatim
grass -c ./G_AQ/MAR

fname=dat/MARv3.12-ANT.nc4
r.in.gdal -o input="NetCDF:${fname}:MSK" output=MSK
ncdump -v X ${fname}
ncdump -v Y ${fname}
g.region rows=148 cols=176 w=-3010000 e=3115000 s=-2555000 n=2590000 -p
g.region e=e+17500 w=w-17500 s=s-17500 n=n+17500 rows=148 cols=176 -p
r.region -c map=MSK

r.out.gdal -c -m input=basins_grow output=./tmp/basins.tif format=GTiff type=Int16 createopt="COMPRESS=DEFLATE"
#+END_SRC

**** Report RCM values

#+BEGIN_SRC jupyter-python :exports both
import xarray as xr
import rioxarray as rxr
import rasterio as rio
import rasterio.plot
import geopandas as gpd
import shapely
import matplotlib.pyplot as plt

ds = xr.open_dataset('./dat/MARv3.12-ANT.nc4')\
    .rename({'TIME2':'time'})\
    .mean(dim='time')

ds = ds.rio.write_crs('EPSG:3031')

# east vs west (see GRASS code above)
basins = rio.open('tmp/basins.tif').read().squeeze()
ds['basins'] = (('Y','X'), basins[::-1,:])
# dsE = ds.where(ds['basins'] == 1)
# dsW = ds.where(ds['basins'] == 2)

# Mask to ice
ds = ds.where(ds['MSK'] > 50)

# Add new terms and limit to terms of interest
ds['RFZ'] = ds['ME'] + ds['RF'] - ds['RU']
vars = ['SF','RF','RU','SU','ME','RFZ']

# scale
## units are mm.w.eq. per grid cell. Grid cell areas are in km^2
## + mm.w.eq. -> m w.eq.: /1E3
## + m w.eq -> kg: *1E3
## + area in km^2 -> m^2: *1E3*1E3
## + kg -> Gt: /1E12
ds[vars] = ds[vars]/1E3 * 1E3 * ds['AREA']*1E3*1E3 / 1E12

print("All:")
print(ds[vars].sum().round().astype(int))

print("\nEast:")
print(ds[vars].where(ds['basins'] == 1).sum().round().astype(int))

print("\nWest:")
print(ds[vars].where(ds['basins'] == 2).sum().round().astype(int))

print("\nPeninsula:")
print(ds[vars].where(ds['basins'] == 3).sum().round().astype(int))
#+END_SRC

#+RESULTS:
#+begin_example
All:
<xarray.Dataset>
Dimensions:      ()
Coordinates:
    spatial_ref  int64 0
Data variables:
    SF           int64 2924
    RF           int64 13
    RU           int64 26
    SU           int64 165
    ME           int64 164
    RFZ          int64 151

East:
<xarray.Dataset>
Dimensions:      ()
Coordinates:
    spatial_ref  int64 0
Data variables:
    SF           int64 1612
    RF           int64 2
    RU           int64 4
    SU           int64 140
    ME           int64 52
    RFZ          int64 50

West:
<xarray.Dataset>
Dimensions:      ()
Coordinates:
    spatial_ref  int64 0
Data variables:
    SF           int64 918
    RF           int64 1
    RU           int64 0
    SU           int64 12
    ME           int64 16
    RFZ          int64 17

Peninsula:
<xarray.Dataset>
Dimensions:      ()
Coordinates:
    spatial_ref  int64 0
Data variables:
    SF           int64 378
    RF           int64 9
    RU           int64 16
    SU           int64 13
    ME           int64 84
    RFZ          int64 77
#+end_example

** GZ retreat in Greenland

From Millan (2022) http://doi.org/10.5194/tc-16-3021-2022
+ Gz retreat is ~0.13 km/yr (Fig. 3a)
+ Ice velocity is ~1200 m/yr (Fig. 3b) (not needed)
+ 20 km wide

Rates are higher per Ciraci (2023) http://doi.org/10.1073/pnas.2220924120, but
+ Ice surface close to flotation near GZ, and shelf is ~500 m thick, so estimate 600 m ice.

Therefore, gz retreat in Gt/year is width * thick * retreat rate * density

#+BEGIN_SRC bash :exports both :results verbatim
frink "0.13 km/yr * 20 km * 600 m * 917 kg/m^3 -> Gt/yr"
#+END_SRC

#+RESULTS:
: 1.43052

Assume similar from other ice shelves too, for a total of ~5 Gt/yr GZ retreat in Greenland.
