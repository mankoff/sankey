
#+PROPERTY: header-args:jupyter-python+ :session sankey :dir (file-name-directory buffer-file-name)

* Table of contents                               :toc_2:noexport:
- [[#readme][README]]
  - [[#greenland][Greenland]]
  - [[#antarctic][Antarctic]]
- [[#mar-data][MAR data]]
  - [[#provenance][Provenance]]
  - [[#greenland-1][Greenland]]
  - [[#aq][AQ]]

* README

CSV files must be named either
+ gl_<str>.csv
+ aq_<str>.csv

So that the scripts know if these are Greenlandic or Antarctic values.

** Greenland

Greenlandic CSV files must contain the following:

#+BEGIN_SRC bash :exports results
cat gl_baseline.csv
#+END_SRC

#+RESULTS:
| Label  | Description           | Value | cite_key           |
| DR     | Drift                 |   200 | TODO               |
| RFZ    | Refreeze (after melt) |   190 | fettweis_2020      |
| SF     | Snowfall              |   700 | fettweis_2020      |
| RF     | Rainfall              |    45 | fettweis_2020      |
| RF-LIQ | Rainfall runoff       |    10 | fettweis_2020      |
| CD     | Condensation          |    30 | TODO               |
| DP     | Deposition            |    20 | TODO               |
| FRET   | Frontal retreat       |    50 | kochtitzky_2023    |
| SU     | Sublimation           |    55 | fettweis_2020      |
| RU     | Runoff                |   390 | fettweis_2002      |
| DYN    | Dynamics              |   500 | mankoff_2020_solid |
| ICE    | Icebergs              |   250 | enderlin_2013      |
| SUB    | Submarine melt        |   250 | enderlin_2013      |
| EV     | Evaporation           |   100 | TODO               |
| BM     | Basal melt            |    20 | karlsson_2021      |

** Antarctic

Antarctic CSV files must contain the following:

#+BEGIN_SRC bash :exports results
cat aq_baseline.csv
#+END_SRC

#+RESULTS:
| Label  | Description            | Value | Reference                                     |
| DR     | Drift                  |     0 | TODO                                          |
| RFZ    | Refreeze (after melt)  |   150 | fettweis_2020                                 |
| SF     | Snowfall               |  2925 | fettweis_2020                                 |
| RF     | Rainfall               |    14 | fettweis_2020                                 |
| RF-LIQ | Rainfall runoff        |     0 | TODO                                          |
| CD     | Condensation           |    10 | TODO                                          |
| DP     | Deposition             |    10 | TODO                                          |
| FRET   | Frontal retreat        |   100 | TODO                                          |
| GZRET  | Grounding line retreat |   100 | TODO                                          |
| SU     | Sublimation            |   164 | fettweis_2020                                 |
| RU     | Runoff                 |    25 | fettweis_2020                                 |
| DYN    | Dynamics               |  2300 | rignot_2019                                   |
| ICE    | Icebergs               |  1150 | TODO Half of 2300 DYN                         |
| SUB    | Submarine melt         |  1150 | TODO Half of 2300 DYN                         |
| EV     | Evaporation            |    10 | TODO                                          |
| BM     | Basal melt             |   210 | TODO 10 x Greenland b/c Antarctica is 10 area |

* MAR data

** Provenance

#+BEGIN_SRC bash :exports both :results verbatim
cd data
wget http://phypc15.geo.ulg.ac.be/fettweis/tmp/ken/MARv3.12-ANT.nc4
wget http://phypc15.geo.ulg.ac.be/fettweis/tmp/ken/MARv3.12-GRD.nc4
#+END_SRC

+ MB ~ SF+RF-RU-SU.
+ Refreezing ~ ME+RF-RU
+ For the uncertainty, you can use 15%.

#+RESULTS:

** Greenland

#+BEGIN_SRC jupyter-python :exports both
import xarray as xr

ds = xr.open_dataset('MARv3.12-GRD.nc4')\
    .rename({'X10_85':'X',
             'Y20_155':'Y',
             'TIME2':'time'})

# Remove Canada
ds['newmask'] = (ds['X'] - ds['Y']).T
ds = ds.where(ds['newmask'] > 500)

# Mask to ice
ds = ds.where(ds['MSK'] > 50)

# Add new terms and limit to terms of interest
ds['RFZ'] = ds['ME'] + ds['RF'] - ds['RU']
ds = ds[['SF','RF','RU','SU','ME','RFZ','AREA']]

# scale
## units are mm.w.eq. per grid cell. Grid cell areas are in km^2
## + mm.w.eq. -> m w.eq.: /1E3
## + m w.eq -> kg: *1E3
## + area in km^2 -> m^2: *1E3*1E3
## + kg -> Gt: /1E12
ds = ds/1E3 * 1E3 * ds['AREA']*1E3*1E3 / 1E12

ds = ds.sum(dim=['X','Y'])

print("baseline:")
print(ds.mean(dim='time'))

print("\n\n2019:")
print(ds.where(ds['time'] == 2019).sum())
#+END_SRC

#+RESULTS:
#+begin_example
baseline:
<xarray.Dataset>
Dimensions:  ()
Data variables:
    SF       float64 700.3
    RF       float64 42.78
    RU       float64 390.3
    SU       float64 53.15
    ME       float64 540.2
    RFZ      float64 192.7
    AREA     float32 720.6


2019:
<xarray.Dataset>
Dimensions:  ()
Data variables:
    SF       float64 632.5
    RF       float64 35.74
    RU       float64 640.3
    SU       float64 60.92
    ME       float64 880.0
    RFZ      float64 275.4
    AREA     float32 720.6
#+end_example


** AQ

*** Build E/W mask

#+BEGIN_SRC bash :exports both :results verbatim
grass -c EPSG:3031 ./G_AQ
fname=MARv3.12-ANT.nc4
r.in.gdal -o input="NetCDF:${fname}:MSK" output=MSK
ncdump -v X ${fname}
ncdump -v Y ${fname}
g.region rows=148 cols=176 w=-3010000 e=3115000 s=-2555000 n=2590000 -p
g.region e=e+17500 w=w-17500 s=s-17500 n=n+17500 rows=148 cols=176 -p
r.region -c map=MSK

v.in.ogr input=${DATADIR}/NSIDC/NSIDC-0709.002/1992.02.07/IceBoundaries_Antarctica_v02.shp output=basins
v.db.select map=basins|head
v.db.select -c map=basins columns=Regions | sort | uniq # East West Peninsula Islands

d.mon wx0
d.rast MSK
d.vect basins fill_color=none
d.vect basins

v.to.rast input=basins output=east use=val val=1 where='Regions == "East"'
v.to.rast input=basins output=west use=val val=2 where='(Regions == "West") OR (Regions == "Peninsula")'
# v.to.rast input=basins output=islands use=val val=3 where='(Regions == "Islands")'
r.patch input=east,west output=eastwest

r.grow input=eastwest output=eastwest_grow radius=5
r.mapcalc "eastwest_grow = int(eastwest_grow)"

r.out.gdal -c -m input=eastwest_grow output=eastwest.tif format=GTiff type=Int16 createopt="COMPRESS=DEFLATE"
#+END_SRC


*** Report RCM values

#+BEGIN_SRC jupyter-python :exports both
import xarray as xr
import rioxarray as rxr
import rasterio as rio
import rasterio.plot
import geopandas as gpd
import shapely
import matplotlib.pyplot as plt

ds = xr.open_dataset('MARv3.12-ANT.nc4')\
    .rename({'TIME2':'time'})\
    .mean(dim='time')

ds = ds.rio.write_crs('EPSG:3031')

# east vs west (see GRASS code above)
basins = rio.open('eastwest.tif').read().squeeze()
ds['basins'] = (('Y','X'), basins[::-1,:])
# dsE = ds.where(ds['basins'] == 1)
# dsW = ds.where(ds['basins'] == 2)

# Mask to ice
ds = ds.where(ds['MSK'] > 50)

# Add new terms and limit to terms of interest
ds['RFZ'] = ds['ME'] + ds['RF'] - ds['RU']
vars = ['SF','RF','RU','SU','ME','RFZ']

# scale
## units are mm.w.eq. per grid cell. Grid cell areas are in km^2
## + mm.w.eq. -> m w.eq.: /1E3
## + m w.eq -> kg: *1E3
## + area in km^2 -> m^2: *1E3*1E3
## + kg -> Gt: /1E12
ds[vars] = ds[vars]/1E3 * 1E3 * ds['AREA']*1E3*1E3 / 1E12

print("Baseline:")
print(ds[vars].sum())

print("\n\nEast:")
print(ds[vars].where(ds['basins'] == 1).sum())

print("\n\nWest:")
print(ds[vars].where(ds['basins'] == 2).sum())
#+END_SRC

#+RESULTS:
#+begin_example
Baseline:
<xarray.Dataset>
Dimensions:      ()
Coordinates:
    spatial_ref  int64 0
Data variables:
    SF           float64 2.924e+03
    RF           float64 13.17
    RU           float64 25.92
    SU           float64 164.5
    ME           float64 164.1
    RFZ          float64 151.4


East:
<xarray.Dataset>
Dimensions:      ()
Coordinates:
    spatial_ref  int64 0
Data variables:
    SF           float64 1.613e+03
    RF           float64 1.718
    RU           float64 3.591
    SU           float64 140.1
    ME           float64 52.31
    RFZ          float64 50.43


West:
<xarray.Dataset>
Dimensions:      ()
Coordinates:
    spatial_ref  int64 0
Data variables:
    SF           float64 1.311e+03
    RF           float64 11.25
    RU           float64 20.87
    SU           float64 24.5
    ME           float64 109.9
    RFZ          float64 100.3
#+end_example

